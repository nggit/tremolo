name: Tests and Coverage

on:
  push:
    branches: ['testing']
  pull_request:
    branches: ['main', 'master']
  workflow_dispatch:

jobs:
  tests:
    name: Python ${{ matrix.python_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python_version:
          - '3.13'
          - '3.12'
          - '3.11'
          - '3.9'
          - '3.8'
          - '3.7'
          - '3.6'
          - 'pypy3.10'
        os: ['ubuntu-20.04', 'windows-latest']
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: List the modified files
        run: echo "FILES_MODIFIED=$(git diff --name-only HEAD HEAD^)" >> $GITHUB_ENV
        if: ${{ !startsWith(matrix.os, 'windows-') }}

      - name: List the modified files (Windows)
        shell: cmd
        run: |
          set "FILES_MODIFIED="
          for /f "delims=" %%f in ('git diff --name-only HEAD HEAD^') do (
            set "FILES_MODIFIED=%FILES_MODIFIED%;%%f"
          )
          echo FILES_MODIFIED=%FILES_MODIFIED% >> %GITHUB_ENV% 
        if: ${{ startsWith(matrix.os, 'windows-') }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade coverage
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}

      - name: Lint
        run: |
          python -m pip install --upgrade bandit
          python -m bandit --recursive tremolo/
          python -m pip install --upgrade flake8
          python -m flake8 .
        if: |
          contains(env.FILES_MODIFIED, '.py') &&
          matrix.os == 'ubuntu-20.04' && matrix.python_version == '3.13'

      - name: Run tests
        run: python alltests.py
        if: ${{ contains(env.FILES_MODIFIED, '.py') && matrix.python_version != '3.13' }}

      - name: Run tests with coverage
        run: |
          python -m coverage run alltests.py
          python -m coverage combine
          mkdir artifact && mv .coverage artifact/.coverage.${{ matrix.os }}
        if: |
          contains(env.FILES_MODIFIED, '.py') &&
          matrix.python_version == '3.13' && !startsWith(matrix.os, 'windows-')

      - name: Run tests with coverage (Windows)
        shell: cmd
        run: |
          python -m coverage run alltests.py
          python -m coverage combine
          mkdir artifact && move .coverage artifact\.coverage.windows
        if: |
          contains(env.FILES_MODIFIED, '.py') &&
          matrix.python_version == '3.13' && startsWith(matrix.os, 'windows-')

      - uses: actions/upload-artifact@v3
        with:
          path: artifact
          include-hidden-files: true
        if: ${{ contains(env.FILES_MODIFIED, '.py') && matrix.python_version == '3.13' }}

  report:
    name: Upload coverage to SonarCloud Scan
    needs: ['tests']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: List the modified files
        run: echo "FILES_MODIFIED=$(git diff --name-only HEAD HEAD^)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m venv --system-site-packages .local
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          python -m pip install --upgrade pip
          python -m pip install --upgrade coverage
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}

      - uses: actions/download-artifact@v3
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}

      - run: |
          tree -L 2

      - name: Combine and view report
        run: |
          python -m coverage combine artifact
          python -m coverage report --show-missing --skip-covered
          python -m coverage xml
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}

      - uses: sonarsource/sonarcloud-github-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ contains(env.FILES_MODIFIED, '.py') }}
